// Code generated by MockGen. DO NOT EDIT.
// Source: user.go

// Package mock_model is a generated GoMock package.
package mock_model

import (
	model "20dojo-online/pkg/server/model"
	sql "database/sql"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserRepositoryInterface is a mock of UserRepositoryInterface interface.
type MockUserRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryInterfaceMockRecorder
}

// MockUserRepositoryInterfaceMockRecorder is the mock recorder for MockUserRepositoryInterface.
type MockUserRepositoryInterfaceMockRecorder struct {
	mock *MockUserRepositoryInterface
}

// NewMockUserRepositoryInterface creates a new mock instance.
func NewMockUserRepositoryInterface(ctrl *gomock.Controller) *MockUserRepositoryInterface {
	mock := &MockUserRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepositoryInterface) EXPECT() *MockUserRepositoryInterfaceMockRecorder {
	return m.recorder
}

// InsertUser mocks base method.
func (m *MockUserRepositoryInterface) InsertUser(record *model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUser", record)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertUser indicates an expected call of InsertUser.
func (mr *MockUserRepositoryInterfaceMockRecorder) InsertUser(record interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUser", reflect.TypeOf((*MockUserRepositoryInterface)(nil).InsertUser), record)
}

// SelectUserByAuthToken mocks base method.
func (m *MockUserRepositoryInterface) SelectUserByAuthToken(authToken string) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectUserByAuthToken", authToken)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectUserByAuthToken indicates an expected call of SelectUserByAuthToken.
func (mr *MockUserRepositoryInterfaceMockRecorder) SelectUserByAuthToken(authToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectUserByAuthToken", reflect.TypeOf((*MockUserRepositoryInterface)(nil).SelectUserByAuthToken), authToken)
}

// SelectUserByPrimaryKey mocks base method.
func (m *MockUserRepositoryInterface) SelectUserByPrimaryKey(userID string) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectUserByPrimaryKey", userID)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectUserByPrimaryKey indicates an expected call of SelectUserByPrimaryKey.
func (mr *MockUserRepositoryInterfaceMockRecorder) SelectUserByPrimaryKey(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectUserByPrimaryKey", reflect.TypeOf((*MockUserRepositoryInterface)(nil).SelectUserByPrimaryKey), userID)
}

// SelectUserByPrimaryKeyForUpdate mocks base method.
func (m *MockUserRepositoryInterface) SelectUserByPrimaryKeyForUpdate(tx *sql.Tx, userID string) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectUserByPrimaryKeyForUpdate", tx, userID)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectUserByPrimaryKeyForUpdate indicates an expected call of SelectUserByPrimaryKeyForUpdate.
func (mr *MockUserRepositoryInterfaceMockRecorder) SelectUserByPrimaryKeyForUpdate(tx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectUserByPrimaryKeyForUpdate", reflect.TypeOf((*MockUserRepositoryInterface)(nil).SelectUserByPrimaryKeyForUpdate), tx, userID)
}

// SelectUsersOrderByHighScoreDesc mocks base method.
func (m *MockUserRepositoryInterface) SelectUsersOrderByHighScoreDesc(limit, offset int) ([]*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectUsersOrderByHighScoreDesc", limit, offset)
	ret0, _ := ret[0].([]*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectUsersOrderByHighScoreDesc indicates an expected call of SelectUsersOrderByHighScoreDesc.
func (mr *MockUserRepositoryInterfaceMockRecorder) SelectUsersOrderByHighScoreDesc(limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectUsersOrderByHighScoreDesc", reflect.TypeOf((*MockUserRepositoryInterface)(nil).SelectUsersOrderByHighScoreDesc), limit, offset)
}

// UpdateUserByPrimaryKey mocks base method.
func (m *MockUserRepositoryInterface) UpdateUserByPrimaryKey(record *model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserByPrimaryKey", record)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserByPrimaryKey indicates an expected call of UpdateUserByPrimaryKey.
func (mr *MockUserRepositoryInterfaceMockRecorder) UpdateUserByPrimaryKey(record interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserByPrimaryKey", reflect.TypeOf((*MockUserRepositoryInterface)(nil).UpdateUserByPrimaryKey), record)
}

// UpdateUserCoinAndHighScoreByPrimaryKey mocks base method.
func (m *MockUserRepositoryInterface) UpdateUserCoinAndHighScoreByPrimaryKey(id string, coin, highScore int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserCoinAndHighScoreByPrimaryKey", id, coin, highScore)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserCoinAndHighScoreByPrimaryKey indicates an expected call of UpdateUserCoinAndHighScoreByPrimaryKey.
func (mr *MockUserRepositoryInterfaceMockRecorder) UpdateUserCoinAndHighScoreByPrimaryKey(id, coin, highScore interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserCoinAndHighScoreByPrimaryKey", reflect.TypeOf((*MockUserRepositoryInterface)(nil).UpdateUserCoinAndHighScoreByPrimaryKey), id, coin, highScore)
}

// UpdateUserCoinByPrimaryKey mocks base method.
func (m *MockUserRepositoryInterface) UpdateUserCoinByPrimaryKey(tx *sql.Tx, userID string, coin int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserCoinByPrimaryKey", tx, userID, coin)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserCoinByPrimaryKey indicates an expected call of UpdateUserCoinByPrimaryKey.
func (mr *MockUserRepositoryInterfaceMockRecorder) UpdateUserCoinByPrimaryKey(tx, userID, coin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserCoinByPrimaryKey", reflect.TypeOf((*MockUserRepositoryInterface)(nil).UpdateUserCoinByPrimaryKey), tx, userID, coin)
}
