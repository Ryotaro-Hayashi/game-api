// Code generated by MockGen. DO NOT EDIT.
// Source: game.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	service "20dojo-online/pkg/server/service"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockGameServiceInterface is a mock of GameServiceInterface interface.
type MockGameServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockGameServiceInterfaceMockRecorder
}

// MockGameServiceInterfaceMockRecorder is the mock recorder for MockGameServiceInterface.
type MockGameServiceInterfaceMockRecorder struct {
	mock *MockGameServiceInterface
}

// NewMockGameServiceInterface creates a new mock instance.
func NewMockGameServiceInterface(ctrl *gomock.Controller) *MockGameServiceInterface {
	mock := &MockGameServiceInterface{ctrl: ctrl}
	mock.recorder = &MockGameServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGameServiceInterface) EXPECT() *MockGameServiceInterfaceMockRecorder {
	return m.recorder
}

// FinishGame mocks base method.
func (m *MockGameServiceInterface) FinishGame(serviceRequest *service.FinishGameRequest) (*service.FinishGameResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinishGame", serviceRequest)
	ret0, _ := ret[0].(*service.FinishGameResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FinishGame indicates an expected call of FinishGame.
func (mr *MockGameServiceInterfaceMockRecorder) FinishGame(serviceRequest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinishGame", reflect.TypeOf((*MockGameServiceInterface)(nil).FinishGame), serviceRequest)
}
